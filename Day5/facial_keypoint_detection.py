# -*- coding: utf-8 -*-
"""facial-keypoint-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jRObvIwaVrjapUfCAjiZZrTJNZVAS3LY
"""

#authenticating google drive
!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

#importing files into notebook
downloaded = drive.CreateFile({'id':''})
downloaded.GetContentFile('X.npy')
downloaded = drive.CreateFile({'id':''})
downloaded.GetContentFile('Y.npy')

downloaded = drive.CreateFile({'id':'1q5c86xfmZh0tHR0l3_18NNWalQz8PmGR'})
downloaded.GetContentFile('face_model.h5')

#importing necessary libraries

import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import MaxPooling2D, Conv2D, BatchNormalization, Activation, GlobalAveragePooling2D, Dense
from keras.callbacks import ModelCheckpoint

#reading .npy files into numpy arrays
trainX = np.load('X.npy')
trainY = np.load('Y.npy')

#Model

model = Sequential()

model.add(BatchNormalization(input_shape=(96, 96, 1)))

model.add(Conv2D(24, (5, 5), padding='same', kernel_initializer='he_normal', input_shape=(96, 96, 1), data_format='channels_last'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))

model.add(Conv2D(36, (5, 5)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))

model.add(Conv2D(48, (5, 5)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))

model.add(Convolution2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='valid'))

model.add(Convolution2D(64, (3, 3)))
model.add(Activation('relu'))

model.add(GlobalAveragePooling2D());

model.add(Dense(500, activation='relu'))
model.add(Dense(90, activation='relu'))
model.add(Dense(30))

#compilation

model.compile(optimizer='rmsprop', loss='mse', metrics=['accuracy'])

#fitting the model

checkpointer = ModelCheckpoint(filepath='face_model.h5', verbose=1, save_best_only=True)

epochs = 10

hist = model.fit(trainX, trainY, validation_split=0.2, shuffle=True, epochs=epochs, batch_size=20, callbacks=[checkpointer], verbose=1)

#plotting the accuracy and loss of training and validation set

import matplotlib.pyplot as plt
plt.plot(hist.history['acc'])
plt.plot(hist.history['val_acc'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()